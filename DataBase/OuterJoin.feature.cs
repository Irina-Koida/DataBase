// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DataBase
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("OuterJoin")]
    public partial class OuterJoinFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "OuterJoin.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "OuterJoin", "\tAs a user\r\n      I want to work with DB data from a selected table\r\n      In ord" +
                    "er to join the data with the way I need", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ability to contain all rows from both tables in DB Airport")]
        [NUnit.Framework.CategoryAttribute("OuterJoinData")]
        [NUnit.Framework.TestCaseAttribute("NULL", "NULL", "21", "Cena", "234,00", "Pigeon", null)]
        [NUnit.Framework.TestCaseAttribute("NULL", "NULL", "22", "Dwane", "345,00", "Auto", null)]
        [NUnit.Framework.TestCaseAttribute("NULL", "NULL", "23", "Paulo", "456,00", "Ship", null)]
        [NUnit.Framework.TestCaseAttribute("NULL", "NULL", "24", "Enrique", "567,00", "Car", null)]
        [NUnit.Framework.TestCaseAttribute("NULL", "NULL", "25", "Justin", "678,00", "Airplane", null)]
        public virtual void AbilityToContainAllRowsFromBothTablesInDBAirport(string name, string family, string age, string buyer, string amount, string delivery, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "OuterJoinData"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("<name>", name);
            argumentsOfScenario.Add("<family>", family);
            argumentsOfScenario.Add("<age>", age);
            argumentsOfScenario.Add("<buyer>", buyer);
            argumentsOfScenario.Add("<amount>", amount);
            argumentsOfScenario.Add("<delivery>", delivery);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ability to contain all rows from both tables in DB Airport", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
testRunner.When("I create a row in the Persons table with some data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age"});
                table3.AddRow(new string[] {
                            "<name>",
                            "<family>",
                            "<age>"});
#line 11
   testRunner.When("I create row in table \"Persons\" with data", ((string)(null)), table3, "When ");
#line hidden
#line 14
 testRunner.When("I create a row in the Orders table with some data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Buyer",
                            "Amount",
                            "Delivery"});
                table4.AddRow(new string[] {
                            "<buyer>",
                            "<amount>",
                            "<delivery>"});
#line 16
   testRunner.When("I create row in table \"Orders\" with data", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age",
                            "Buyer",
                            "Amount",
                            "Delivery"});
                table5.AddRow(new string[] {
                            "<name>",
                            "<family>",
                            "<age>",
                            "<buyer>",
                            "<amount>",
                            "<delivery>"});
#line 19
  testRunner.Then("Table contains data", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
