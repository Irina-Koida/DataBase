// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DataBase
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DataBase")]
    public partial class DataBaseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "DataBase.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "", "DataBase", "\tAs a user\r\n    I want to work with DB data\r\n    In order to operate the data the" +
                    " way I need ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is possible to insert data to Airport DB")]
        [NUnit.Framework.CategoryAttribute("InsertData")]
        [NUnit.Framework.TestCaseAttribute("Lucius", "Malfoy", "35", "Aberdeen", null)]
        [NUnit.Framework.TestCaseAttribute("Tom", "Riddle", "50", "Armagh", null)]
        [NUnit.Framework.TestCaseAttribute("Lily", "Evans", "35", "Bristol", null)]
        [NUnit.Framework.TestCaseAttribute("Severus", "Snape", "35", "Birmingham", null)]
        [NUnit.Framework.TestCaseAttribute("Albus", "Doumbledore", "78", "Lisburn", null)]
        public virtual void ItIsPossibleToInsertDataToAirportDB(string name, string family, string age, string city, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InsertData"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("family", family);
            argumentsOfScenario.Add("age", age);
            argumentsOfScenario.Add("city", city);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is possible to insert data to Airport DB", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age",
                            "City"});
                table1.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", family),
                            string.Format("{0}", age),
                            string.Format("{0}", city)});
#line 8
 testRunner.When("I create row in table \"Persons\" with data", ((string)(null)), table1, "When ");
#line hidden
#line 11
 testRunner.When("I select whole \"Persons\" table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "FirstName",
                            "LastName",
                            "Age",
                            "City"});
                table2.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", family),
                            string.Format("{0}", age),
                            string.Format("{0}", city)});
#line 12
 testRunner.Then("Table contains data", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("It is possible to insert data to DB Airport")]
        [NUnit.Framework.CategoryAttribute("InsertData")]
        [NUnit.Framework.TestCaseAttribute("Lucius", "456,00", "Aconite", null)]
        [NUnit.Framework.TestCaseAttribute("Tom", "934,98", "Asphodel", null)]
        [NUnit.Framework.TestCaseAttribute("Lily", "3218,00", "Badian", null)]
        [NUnit.Framework.TestCaseAttribute("Severus", "457,89", "Belladonna", null)]
        [NUnit.Framework.TestCaseAttribute("Albus", "231,00", "Bubontuber", null)]
        public virtual void ItIsPossibleToInsertDataToDBAirport(string buyer, string amount, string delivery, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "InsertData"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("buyer", buyer);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("delivery", delivery);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("It is possible to insert data to DB Airport", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Buyer",
                            "Amount",
                            "Delivery"});
                table3.AddRow(new string[] {
                            string.Format("{0}", buyer),
                            string.Format("{0}", amount),
                            string.Format("{0}", delivery)});
#line 26
 testRunner.When("I create row in table \"Orders\" with some data", ((string)(null)), table3, "When ");
#line hidden
#line 29
 testRunner.When("I select all \"Orders\" table", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Buyer",
                            "Amount",
                            "Delivery"});
                table4.AddRow(new string[] {
                            string.Format("{0}", buyer),
                            string.Format("{0}", amount),
                            string.Format("{0}", delivery)});
#line 30
 testRunner.Then("Table contains some data", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
